#!/usr/bin/perl
use strict;
use warnings;
use List::Util 'shuffle';

# Function to display help menu
sub print_usage {
    print "Usage: $0 [total-fragments] [error-rate] [fragment-size]\n";
    print "\n";
    print "Arguments:\n";
    print "  total-fragments             Specify the total number of fragments. This is a required argument and must be a positive integer.\n";
    print "  error-rate                  Specify the error rate desired [i.e.: if 1% is desired, use 0.01]. This is an optional argument and must be positive. The default is 0.01.\n";
    print " fragment-size                Specify the fragment size (bp). This is an optional argument and has to be used with error-rate. The default is 150bp.\n";
    print "\n";
    print "Example:\n";
    print "  $0 100 0.01 150\n";
}
# Simulate the errors for each sequence
my $error_rate = 0.01;  # 1% error rate
my $fragment_size = 150;

# Main script
if (@ARGV == 0) {
    # No arguments were provided
    print "Error: Missing argument for total number of fragments.\n";
    print_usage();
    exit 1;  # Exiting with a general error code
}

# First argument is total number of fragments
my $total_fragments = $ARGV[0];

# Validate the total fragments input
if ($total_fragments !~ /^\d+$/ || $total_fragments <= 0) {
    print "Error: Total number of fragments must be a positive integer.\n";
    print_usage();
    exit 1;  # Exiting with a general error code
}

if ( @ARGV >= 2 ){
	$error_rate = $ARGV[1];
}
if ( @ARGV == 3 ){
	$fragment_size = $ARGV[2];
}

# If 'help' is requested or an incorrect number of arguments are supplied, display usage
if ($total_fragments eq 'help' || @ARGV > 3) {
    print_usage();
    exit 0;  # Exiting with a success status code because help was asked, not because there was an error
}

# Mutation matrix
my %mutation_matrix = (
    'A' => { 'A' => 0, 'C' => 0.4918, 'G' => 0.3377, 'T' => 0.1705 },
    'C' => { 'A' => 0.5238, 'C' => 0, 'G' => 0.2661, 'T' => 0.2101 },
    'G' => { 'A' => 0.3754, 'C' => 0.2355, 'G' => 0, 'T' => 0.3890 },
    'T' => { 'A' => 0.2505, 'C' => 0.2552, 'G' => 0.4942, 'T' => 0 }
);

# Function to simulate mutation based on the mutation matrix
sub mutate_nucleotide {
    my ($nucleotide) = @_;
    my $random_number = rand();
    my $cumulative_probability = 0;

    for my $possible_mutation (keys %{$mutation_matrix{$nucleotide}}) {
        $cumulative_probability += $mutation_matrix{$nucleotide}{$possible_mutation};
        if ($random_number < $cumulative_probability) {
            return $possible_mutation;
        }
    }

    # This part of the code should never be reached if the probabilities are correct
    # (i.e., they sum up to 1). We return the original nucleotide as a safe default.
    return $nucleotide;
}

# Function to simulate errors in a DNA sequence
sub simulate_errors {
    my ($sequence, $error_rate) = @_;
    my $length = length($sequence);
    my $num_errors = int($length * $error_rate);

    for (1..$num_errors) {
        my $position = int(rand($length));  # select a random position
        my $original_nucleotide = substr($sequence, $position, 1);
        my $new_nucleotide = mutate_nucleotide($original_nucleotide);

        substr($sequence, $position, 1) = $new_nucleotide;
    }
    return $sequence;
}

sub cut_sequence{
	my ($seq, $total_fragments) = @_;
	my @fragments;

	while( scalar(@fragments) < $total_fragments ){
		my $start = int(rand(length($seq)- $fragment_size));
		my $fragment = substr($seq, $start, $fragment_size);
		push @fragments, $fragment;
	}
	return @fragments;
}

#JF915184.1
my $sequence1 = 'ATGAAGGCAATACTAGTAGTTCTGCTATATACATTTGCAACCGCAAATGCAGACACATTATGTATAGGTTATCATGCGAACAATTCAACAGACACTGTAGACACAGTACTAGAAAAGAATGTAACAGTAACACACTCTGTTAACCTTCTAGAAGACAAGCATAACGGGAAACTATGCAAACTAAGAGGGGTAGCCCCATTGCATTTGGGTAAATGTAACATTGCTGGCTGGATCCTGGGAAATCCAGAGTGTGAATCACTCTCCACAGCAAGCTCATGGTCCTACATTGTGGAAACACCTAGTTCAGACAATGGAACGTGTTACCCAGGAGATTTCATCGATTATGAGGAGCTAAGAGAGCAATTGAGCTCAGTGTCATCATTTGAAAGGTTTGAGATATTCCCCAAGACAAGTTCATGGCCCAATCATGACTCGAACAAAGGTGTAACGGCAGCATGTCCTCATGCTGGAGCAAAAAGCTTCTACAAAAATTTAATATGGCTAGTTAAAAAAGGAAATTCATACCCAAAGCTCAGCAAATCCTACATTAATGATAAAGGGAAAGAAGTCCTCGTGCTATGGGGCATTCACCATCCACCTACTAGTGCTGACCAACAAAGTCTCTATCAGAATGCAGATACATATGTTTTTGTGGGGTCATCAAGATACAGCAAGAAGTTCAAGCCGGAAATAGCAATAAGACCCAAAGTGAGGGATCAAGAAGGGAGAATGAACTATTACTGGACACTAGTAGAGCCGGGAGACAAAATAACATTCGAAGCAACTGGAAATCTAGTGGTACCGAGATATGCATTCGCAATGGAAAGAAATGCTGGATCTGGTATTATCATTTCAGATACACCAGTCCACGATTGCAATACAACTTGTCAAACACCCAAGGGTGCTATAAACACCAGCCTCCCATTTCAGAATATACATCCGATCACAATTGGAAAATGTCCAAAATATGTAAAAAGCACAAAATTGAGACTGGCCACAGGATTGAGGAATATCCCGTCTATTCAATCTAGAGGCCTATTTGGGGCCATTGCCGGTTTCATTGAAGGGGGGTGGACAGGGATGGTAGATGGATGGTACGGTTATCACCATCAAAATGAGCAGGGGTCAGGATATGCAGCCGACCTGAAGAGCACACAGAATGCCATTGACGAGATTACTAACAAAGTAAATTCTGTTATTGAAAAGATGAATACACAGTTCACAGCAGTAGGTAAAGAGTTCAACCACCTGGAAAAAAGAATAGAGAATTTAAATAAAAAAGTTGATGATGGTTTCCTGGACATTTGGACTTACAATGCCGAACTGTTGGTTCTATTGGAAAATGAAAGAACTTTGGACTACCACGATTCAAATGTGAAGAACTTATATGAAAAGGTAAGAAGCCAGCTAAAAAACAATGCCAAGGAAATTGGAAACGGCTGCTTTGAATTTTACCACAAATGCGATAACACGTGCATGGAAAGTGTCAAAAATGGGACTTATGACTACCCAAAATACTCAGAGGAAGCAAAATTAAACAGAGAAGAAATAGATGGGGTAAAGCTGGAATCAACAAGGATTTACCAGATTTTGGCGATCTATTCAACTGTCGCCAGTTCATTGGTACTGGTAGTCTCCCTGGGGGCAATCAGTTTCTGGATGTGCTCTAATGGGTCTCTACAGTGTAGAATATGTATTTAA';
#NC_007366.1
my $sequence2 = 'AGCAAAAGCAGGGGATAATTCTATTAACCATGAAGACTATCATTGCTTTGAGCTACATTCTATGTCTGGTTTTCGCTCAAAAACTTCCCGGAAATGACAACAGCACGGCAACGCTGTGCCTTGGGCACCATGCAGTACCAAACGGAACGATAGTGAAAACAATCACGAATGACCAAATTGAAGTCACTAATGCTACTGAACTGGTTCAGAGTTCCTCAACAGGTGGAATATGCGACAGTCCTCATCAGATCCTTGATGGAGAAAACTGCACACTAATAGATGCTCTATTGGGAGACCCTCAGTGTGATGGCTTCCAAAATAAGAAATGGGACCTTTTTGTTGAACGCAGCAAAGCCTACAGCAACTGTTACCCTTATGATGTGCCGGATTATGCCTCCCTTAGGTCACTAGTTGCCTCATCCGGCACACTGGAGTTTAACAATGAAAGCTTCAATTGGACTGGAGTCACTCAAAATGGAACAAGCTCTGCTTGCAAAAGGAGATCTAATAACAGTTTCTTTAGTAGATTGAATTGGTTGACCCACTTAAAATTCAAATACCCAGCATTGAACGTGACTATGCCAAACAATGAAAAATTTGACAAACTGTACATTTGGGGGGTTCACCACCCGGGTACGGACAATGACCAAATCAGCCTATATGCTCAAGCATCAGGAAGAATCACAGTCTCTACCAAAAGAAGCCAACAAACCGTAATCCCGAGTATCGGATCTAGACCCAGGATAAGGGATGTCCCCAGCAGAATAAGCATCTATTGGACAATAGTAAAACCGGGAGACATACTTTTGATTAACAGCACAGGGAATCTAATTGCTCCTCGGGGTTACTTCAAAATACGAAGTGGGAAAAGCTCAATAATGAGATCAGATGCACCCATTGGCAAATGCAATTCTGAATGCATCACTCCAAATGGAAGCATTCCCAATGACAAACCATTTCAAAATGTAAACAGGATCACATATGGGGCCTGTCCCAGATATGTTAAGCAAAACACTCTGAAATTGGCAACAGGGATGCGAAATGTACCAGAGAAACAAACTAGAGGCATATTTGGCGCAATCGCGGGTTTCATAGAAAATGGTTGGGAGGGAATGGTAGACGGTTGGTACGGTTTCAGGCATCAAAATTCTGAGGGAACAGGACAAGCAGCAGATCTCAAAAGCACTCAAGCAGCAATCAACCAAATCAATGGGAAGCTGAATAGGTTGATCGGGAAAACAAACGAGAAATTCCATCAGATTGAAAAAGAATTCTCAGAAGTAGAAGGGAGAATTCAGGACCTCGAGAAATATGTTGAGGACACTAAAATAGATCTCTGGTCATACAACGCGGAGCTTCTTGTGGCCCTGGAGAACCAACATACAATTGATCTAACTGACTCAGAAATGAACAAACTGTTTGAAAGAACAAAGAAGCAACTGAGGGAAAATGCTGAGGATATGGGCAATGGTTGTTTCAAAATATACCACAAATGTGACAATGCCTGCATAGGGTCAATCAGAAATGGAACTTATGACCATGATGTATACAGAGATGAAGCATTAAACAACCGGTTCCAGATCAAAGGTGTTGAGTTGAAGTCAGGATACAAAGATTGGATCCTATGGATTTCCTTTGCCATATCATGTTTTTTGCTTTGTGTTGCTTTGTTGGGGTTCATCATGTGGGCCTGCCAAAAAGGCAACATTAGGTGCAACATTTGCATTTGAGTGCATTAATTAAAAACACCCTTGTTTCTACT';
#CY097350.1
my $sequence3 = 'GGTCCAAACTATGAAAATGGAAAGAATAGTGATTGCCCTCGCAATAATCAGCATTGTCAAAGGTGACCAAATTTGCATTGGTTACCATGCAAACAATTCAACAGAGCAGGTTGATACAATCATGGAAAAGAATGTGACGGTCACACATGCTCAGGATATACTGGAGAAAGAGCACAATGGGAAACTTTGCAGTCTTAAAGGAGTGAGGCCCCTCATTCTGAAGGATTGCAGCGTAGCTGGATGGCTTCTTGGAAACCCAATGTGTGATGAATTCCTGAATGTACCAGAATGGTCATACATCGTGGAAAAAGATAATCCAGTCAATGGCCTGTGCTATCCAGGAGACTTCAGCGACTACGAAGAACTGAAGCATTTAATGAGCATCACAAACCATTTTGAGAAAATTCAGATAATCCCTAGGAGTTCTTGGTCCAATCATGATGCCTCATCAGGAGTGAGTTCGGCATGCCCATACAATGGTAGATCTTCCTTTTTCAGGAATGTAGTGTGGTTGATCAAGAAGAATAATGCATACCCAACAATAAAGAGGACCTATAACAACACCAATGTAGAAGACCTTTTAATAATATGGGGAATACACCACCCTAATGATGCAGCTGAACAAACAAAACTCTACCAGAACTCGAACACTTATGTGTCTGTAGGAACATCAACACTGAATCAGAGATCAATCCCAGAAATAGCCACTAGACCCAAAGTGAACGGACAAAGTGGAAGAATGGAATTTTTCTGGACAATACTGAAGTCGAACGATGCAATCAGCTTTGAAAGTAACGGGAATTTTATAGCTCCTGAATATGCGTACAAAATTGTCAAGAAAGGAGATTCAGCAATCATGAGAAGTGAATTAGAGTATGGTAACTGTGACACCAAATGTCAGACTCCATTGGGTGCTATAAATTCCAGTATGCCCTTCCACAATGTTCATCCTCTTACCATTGGGGAGTGCCCCAAGTATGTCAAATCGGACAAACTGGTCCTTGCAACAGGGCTAAGAAACATACCCCAAAGAGAAACAAGAGGCCTATTTGGTGCAATAGCAGGATTCATAGAAGGAGGATGGCAAGGAATGGTTGACGGGTGGTACGGATACCGTCATAGCAATGAGCAGGGAAGTGGATATGCTGCAGACAAAGAATCTACCCAGAAAGCAATCGATGGAATCACCAACAAAGTAAACTCAATCATTGACAAAATGAACACTCAATTCGAAGCCGTTGGGAAAGAATTCAACAACCTGGAAAGGAGAATAGAAAATTTGAATAAGAAAATGGAAGATGGGTTTTTAGATGTATGGACTTACAATGCAGAACTTCTCGTGCTCATGGAAAACGAAAGAACTCTGGATTTCCATGATTCAAATGTCAAGAACCTATACGATAAGGTCCGACTCCAGCTGAGAGACAATGCAAAAGAATTGGGCAACGGATGCTTCGAATTCTACCACAAGTGTGACAATGAATGCATGGAAAGTGTGAGAAATGGAACGTATGACTATCCGCAATATTCAGAAGAATCAAGACTGAACAGAGAGGAAATAGACGGAGTCAAATTGGAGTCAATGGGCACCTATCAGATATTATCAATCTACTCAACAGTGGCGAGTTCCCTAGCACTGGCAATCATGATAGCTGGTCTATCTTTTTGGATGTGTTCCAATGGATCATTGCAGTGCAGAATTTGCATCTAGAATTGTGAGTTCAGATTATAATTAAAAACACC';
my $fragments1 = int($total_fragments * 0.3);
my $fragments2 = int($total_fragments * 0.69);
my $fragments3 = $total_fragments - $fragments1 - $fragments2;

my @fragments_seq1 = cut_sequence($sequence1, $fragments1);
my @fragments_seq2 = cut_sequence($sequence2, $fragments2);
my @fragments_seq3 = cut_sequence($sequence3, $fragments3);
my @combo = (@fragments_seq1,@fragments_seq2,@fragments_seq3);
my @combined_fragments = shuffle(@combo);

my $i=0;
foreach my $seq (@combined_fragments) {
    $seq = simulate_errors($seq, $error_rate);
    print ">sim$i\n$seq\n";
    $i++;
}
